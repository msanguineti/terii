class t{constructor({actions:t,mutations:s,initialState:i}){this._actions=null!=t?t:{},this._mutations=null!=s?s:{},this._status="RESTING",this._callbacks=[],this._state=new Proxy(i||{},{set:(t,s,i)=>(t[s]=i,this.processCallbacks(t),this._status="RESTING",!0)})}get state(){return{...this._state}}get status(){return this._status}dispatch(t,s){return"function"!=typeof this._actions[t]?(console.error(`Action "${t}" doesn't exist.`),!1):(this._status="ACTION",this._actions[t](this,s))}commit(t,s){if("function"!=typeof this._mutations[t])return console.error(`Mutation "${t}" doesn't exist`),!1;this._status="MUTATION";const i=this._mutations[t](this._state,s);return this._state=Object.assign(this._state,i),!0}subscribe(t){return"function"!=typeof t?(console.error("You can only subscribe to Store changes with a valid function"),!1):(this._callbacks.push(t),!0)}processCallbacks(...t){return!!this._callbacks.length&&(this._callbacks.forEach((s=>s(t))),!0)}}export{t as Store};
